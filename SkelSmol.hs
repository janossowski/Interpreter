-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelSmol where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsSmol

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsSmol.Ident -> Result
transIdent x = case x of
  AbsSmol.Ident string -> failure x

transProgram :: AbsSmol.Program -> Result
transProgram x = case x of
  AbsSmol.EProg functiondefs -> failure x

transFunctionDef :: AbsSmol.FunctionDef -> Result
transFunctionDef x = case x of
  AbsSmol.EFunDef ident block -> failure x

transBlock :: AbsSmol.Block -> Result
transBlock x = case x of
  AbsSmol.EBlock statements -> failure x

transStatement :: AbsSmol.Statement -> Result
transStatement x = case x of
  AbsSmol.EVarDecl type_ ident expr -> failure x
  AbsSmol.ERovarDecl type_ ident expr -> failure x
  AbsSmol.EAssign ident expr -> failure x
  AbsSmol.EPrint expr -> failure x
  AbsSmol.EWhile expr block -> failure x
  AbsSmol.EIf expr block1 block2 -> failure x
  AbsSmol.EFor type_ ident expr1 expr2 block -> failure x
  AbsSmol.EBlockStatement block -> failure x
  AbsSmol.EExpressionStatement expr -> failure x

transType :: AbsSmol.Type -> Result
transType x = case x of
  AbsSmol.Int -> failure x
  AbsSmol.Str -> failure x
  AbsSmol.Bool -> failure x

transExpr :: AbsSmol.Expr -> Result
transExpr x = case x of
  AbsSmol.EVar ident -> failure x
  AbsSmol.ELitInt integer -> failure x
  AbsSmol.ELitTrue -> failure x
  AbsSmol.ELitFalse -> failure x
  AbsSmol.EApp ident -> failure x
  AbsSmol.EString string -> failure x
  AbsSmol.Neg expr -> failure x
  AbsSmol.Not expr -> failure x
  AbsSmol.EMul expr1 mulop expr2 -> failure x
  AbsSmol.EAdd expr1 addop expr2 -> failure x
  AbsSmol.ERel expr1 relop expr2 -> failure x
  AbsSmol.EAnd expr1 expr2 -> failure x
  AbsSmol.EOr expr1 expr2 -> failure x

transAddOp :: AbsSmol.AddOp -> Result
transAddOp x = case x of
  AbsSmol.Plus -> failure x
  AbsSmol.Minus -> failure x

transMulOp :: AbsSmol.MulOp -> Result
transMulOp x = case x of
  AbsSmol.Times -> failure x
  AbsSmol.Div -> failure x
  AbsSmol.Mod -> failure x

transRelOp :: AbsSmol.RelOp -> Result
transRelOp x = case x of
  AbsSmol.LTH -> failure x
  AbsSmol.LE -> failure x
  AbsSmol.GTH -> failure x
  AbsSmol.GE -> failure x
  AbsSmol.EQU -> failure x
  AbsSmol.NE -> failure x
