-- programs ------------------------------------------------

entrypoints Program ;

EProg . Program ::= [FunctionDef];

separator nonempty FunctionDef "" ;

EFunDef . FunctionDef ::= "func" Ident "()" Block ;

-- statements ----------------------------------------------

EBlock.     Block ::= "{" [Statement] "}" ;

separator  Statement "" ;

EVarDecl . Statement ::= Type Ident "=" Expr ";" ;

ERovarDecl . Statement ::= Type Ident "::=" Expr ";" ;

EAssign . Statement ::= Ident "=" Expr ";" ;

EPrint . Statement ::= "print" "(" Expr ")" ";" ;

EWhile . Statement ::= "while" "(" Expr ")" Block ;

EIf . Statement ::= "if" "(" Expr ")" Block "else" Block ;

EFor . Statement ::= "for" Type Ident "=" Expr "to" Expr Block ;

EBlockStatement . Statement ::= Block ;

EExpressionStatement . Statement ::= Expr ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "("")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;