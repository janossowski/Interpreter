-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language gramatyka.

module AbsGramatyka where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = EProg [FunctionDef]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionDef = EFunDef Ident Block
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Block = EBlock [Statement]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Statement
    = EVarDecl Type Ident Expr
    | ERovarDecl Type Ident Expr
    | EAssign Ident Expr
    | EPrint Expr
    | EWhile Expr Block
    | EIf Expr Block Block
    | EFor Type Ident Expr Expr Block
    | EReturn Expr
    | EBlockStatement Block
    | EExpressionStatement Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Int | Str | Bool
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

