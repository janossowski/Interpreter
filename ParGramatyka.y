-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGramatyka
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGramatyka
import LexGramatyka

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&&'      { PT _ (TS _ 4)  }
  '('       { PT _ (TS _ 5)  }
  '()'      { PT _ (TS _ 6)  }
  ')'       { PT _ (TS _ 7)  }
  '*'       { PT _ (TS _ 8)  }
  '+'       { PT _ (TS _ 9)  }
  ','       { PT _ (TS _ 10) }
  '-'       { PT _ (TS _ 11) }
  '/'       { PT _ (TS _ 12) }
  '::='     { PT _ (TS _ 13) }
  ';'       { PT _ (TS _ 14) }
  '<'       { PT _ (TS _ 15) }
  '<='      { PT _ (TS _ 16) }
  '='       { PT _ (TS _ 17) }
  '=='      { PT _ (TS _ 18) }
  '>'       { PT _ (TS _ 19) }
  '>='      { PT _ (TS _ 20) }
  'boolean' { PT _ (TS _ 21) }
  'else'    { PT _ (TS _ 22) }
  'false'   { PT _ (TS _ 23) }
  'for'     { PT _ (TS _ 24) }
  'func'    { PT _ (TS _ 25) }
  'if'      { PT _ (TS _ 26) }
  'int'     { PT _ (TS _ 27) }
  'print'   { PT _ (TS _ 28) }
  'string'  { PT _ (TS _ 29) }
  'to'      { PT _ (TS _ 30) }
  'true'    { PT _ (TS _ 31) }
  'while'   { PT _ (TS _ 32) }
  '{'       { PT _ (TS _ 33) }
  '||'      { PT _ (TS _ 34) }
  '}'       { PT _ (TS _ 35) }
  L_Ident   { PT _ (TV $$)   }
  L_integ   { PT _ (TI $$)   }
  L_quoted  { PT _ (TL $$)   }

%%

Ident :: { AbsGramatyka.Ident }
Ident  : L_Ident { AbsGramatyka.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsGramatyka.Program }
Program : ListFunctionDef { AbsGramatyka.EProg $1 }

ListFunctionDef :: { [AbsGramatyka.FunctionDef] }
ListFunctionDef
  : FunctionDef { (:[]) $1 }
  | FunctionDef ListFunctionDef { (:) $1 $2 }

FunctionDef :: { AbsGramatyka.FunctionDef }
FunctionDef
  : 'func' Ident '()' Block { AbsGramatyka.EFunDef $2 $4 }

Block :: { AbsGramatyka.Block }
Block : '{' ListStatement '}' { AbsGramatyka.EBlock $2 }

ListStatement :: { [AbsGramatyka.Statement] }
ListStatement
  : {- empty -} { [] } | Statement ListStatement { (:) $1 $2 }

Statement :: { AbsGramatyka.Statement }
Statement
  : Type Ident '=' Expr ';' { AbsGramatyka.EVarDecl $1 $2 $4 }
  | Type Ident '::=' Expr ';' { AbsGramatyka.ERovarDecl $1 $2 $4 }
  | Ident '=' Expr ';' { AbsGramatyka.EAssign $1 $3 }
  | 'print' '(' Expr ')' ';' { AbsGramatyka.EPrint $3 }
  | 'while' '(' Expr ')' Block { AbsGramatyka.EWhile $3 $5 }
  | 'if' '(' Expr ')' Block 'else' Block { AbsGramatyka.EIf $3 $5 $7 }
  | 'for' Type Ident '=' Expr 'to' Expr Block { AbsGramatyka.EFor $2 $3 $5 $7 $8 }
  | Block { AbsGramatyka.EBlockStatement $1 }
  | Expr ';' { AbsGramatyka.EExpressionStatement $1 }

Type :: { AbsGramatyka.Type }
Type
  : 'int' { AbsGramatyka.Int }
  | 'string' { AbsGramatyka.Str }
  | 'boolean' { AbsGramatyka.Bool }

Expr6 :: { AbsGramatyka.Expr }
Expr6
  : Ident { AbsGramatyka.EVar $1 }
  | Integer { AbsGramatyka.ELitInt $1 }
  | 'true' { AbsGramatyka.ELitTrue }
  | 'false' { AbsGramatyka.ELitFalse }
  | Ident '(' ')' { AbsGramatyka.EApp $1 }
  | String { AbsGramatyka.EString $1 }
  | '(' Expr ')' { $2 }

Expr5 :: { AbsGramatyka.Expr }
Expr5
  : '-' Expr6 { AbsGramatyka.Neg $2 }
  | '!' Expr6 { AbsGramatyka.Not $2 }
  | Expr6 { $1 }

Expr4 :: { AbsGramatyka.Expr }
Expr4
  : Expr4 MulOp Expr5 { AbsGramatyka.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsGramatyka.Expr }
Expr3
  : Expr3 AddOp Expr4 { AbsGramatyka.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsGramatyka.Expr }
Expr2
  : Expr2 RelOp Expr3 { AbsGramatyka.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsGramatyka.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsGramatyka.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsGramatyka.Expr }
Expr : Expr1 '||' Expr { AbsGramatyka.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [AbsGramatyka.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsGramatyka.AddOp }
AddOp : '+' { AbsGramatyka.Plus } | '-' { AbsGramatyka.Minus }

MulOp :: { AbsGramatyka.MulOp }
MulOp
  : '*' { AbsGramatyka.Times }
  | '/' { AbsGramatyka.Div }
  | '%' { AbsGramatyka.Mod }

RelOp :: { AbsGramatyka.RelOp }
RelOp
  : '<' { AbsGramatyka.LTH }
  | '<=' { AbsGramatyka.LE }
  | '>' { AbsGramatyka.GTH }
  | '>=' { AbsGramatyka.GE }
  | '==' { AbsGramatyka.EQU }
  | '!=' { AbsGramatyka.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

